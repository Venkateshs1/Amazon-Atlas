!DOCTYPE html
html
body

h1My First Headingh1
pMy first paragraph.p

body
html

db.aggregateproduct.insertMany( [
   { product: "register", quantity: 25, size: { height: 14, weight: 21, unit: "cm" }, status: "A" },
   { product: "book", quantity: 50, size: { height: 8.5, weight: 11, unit: "in" }, status: "A" },
   { product: "sheet", quantity: 100, size: { height: 8.5, weight: 11, unit: "in" }, status: "D" },
   { product: "timetable", quantity: 75, size: { height: 22.85, weight: 30, unit: "cm" }, status: "D" },
   { product: "envelop", quantity: 45, size: { height: 10, weight: 15.25, unit: "cm" }, status: "A" },
   { product: "register", quantity: 25, size: { height: 14, weight: 21, unit: "cm" }, status: "A" },
   { product: "book", quantity: 50, size: { height: 8.5, weight: 11, unit: "in" }, status: "A" },
   { product: "sheet", quantity: 100, size: { height: 8.5, weight: 11, unit: "in" }, status: "D" },
   { product: "timetable", quantity: 75, size: { height: 22.85, weight: 30, unit: "cm" }, status: "D" },
   { product: "envelop", quantity: 45, size: { height: 10, weight: 15.25, unit: "cm" }, status: "A" },
   { product: "register", quantity: 25, size: { height: 14, weight: 21, unit: "cm" }, status: "A" },
   { product: "book", quantity: 50, size: { height: 8.5, weight: 11, unit: "in" }, status: "A" }
]);

db.aggregateproduct.aggregate([
   { $match: { status: "A" } },
   { $group: { _id: "$product", total: { $sum: "$quantity" } } }
])


db.aggregateproduct.aggregate([
   { $match: { status: "A" } },
   { $group: { _id: "$product", total: { $sum: "$quantity" } } },
   {$sort : { total : 1 }
   }
])


db.aggregateproduct.aggregate([
   { $match: { status: "A" } },
   { $addFields: {
    maxWeight: { $max: "$size.weight" },
    minSizeHeight: { $min: "$size.height" }
	} }
])


db.aggregateproduct.aggregate([
   { $match: { status: "A" } },
   { $addFields: {
    maxQ: { $max: "$quantity" },
    minSizeHeight: { $min: "$size.height" }
	} }
])


db.aggregateproduct.aggregate([
   { $project : { product : 1,quantity : 1 } } , //optional line
   { $group: { _id: "$product", total: { $sum: "$quantity" } } },
   {$sort : { total : 1 }
   }
])

firstdb> db.aggregateproduct.aggregate([
...    { $project : { product : 1,quantity : 1 } } ,
...    { $group: { _id: "$product", total: { $sum: "$quantity" } } },
...    {$sort : { total : 1 }
...    }
... ])
[
  { _id: 'register', total: 75 },
  { _id: 'envelop', total: 90 },
  { _id: 'book', total: 150 },
  { _id: 'timetable', total: 150 },
  { _id: 'sheet', total: 200 }
]
firstdb> db.aggregateproduct.aggregate([{ $group: { _id: "$product", total: { $sum: "$quantity" } } }, { $sort: { total: 1 } }] )
[
  { _id: 'register', total: 75 },
  { _id: 'envelop', total: 90 },
  { _id: 'book', total: 150 },
  { _id: 'timetable', total: 150 },
  { _id: 'sheet', total: 200 }
]





Pipeline



db.orders.insertMany( [
  { _id: 0, name: "Pepperoni", size: "small", price: 19,
    quantity: 10, date: ISODate( "2021-03-13T08:14:30Z" ) },
  { _id: 1, name: "Pepperoni", size: "medium", price: 20,
    quantity: 20, date : ISODate( "2021-03-13T09:13:24Z" ) },
  { _id: 2, name: "Pepperoni", size: "large", price: 21,
    quantity: 30, date : ISODate( "2021-03-17T09:22:12Z" ) },
  { _id: 3, name: "Cheese", size: "small", price: 12,
    quantity: 15, date : ISODate( "2021-03-13T11:21:39.736Z" ) },
  { _id: 4, name: "Cheese", size: "medium", price: 13,
    quantity:50, date : ISODate( "2022-01-12T21:23:13.331Z" ) },
  { _id: 5, name: "Cheese", size: "large", price: 14,
    quantity: 10, date : ISODate( "2022-01-12T05:08:13Z" ) },
  { _id: 6, name: "Vegan", size: "small", price: 17,
    quantity: 10, date : ISODate( "2021-01-13T05:08:13Z" ) },
  { _id: 7, name: "Vegan", size: "medium", price: 18,
    quantity: 10, date : ISODate( "2021-01-13T05:10:13Z" ) }
] )




Calculate Total Order Quantity
The following aggregation pipeline example contains two stages and returns the total order quantity of medium size pizzas grouped by pizza name:
db.orders.aggregate( [


  // Stage 1: Filter pizza order documents by pizza size
  {
     $match: { size: "medium" }
  },


  // Stage 2: Group remaining documents by pizza name and calculate total quantity
  {
     $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
  }


] )



The $match stage:
Filters the pizza order documents to pizzas with a size of medium.
Passes the remaining documents to the $group stage.
The $group stage:
Groups the remaining documents by pizza name.
Uses $sum to calculate the total order quantity for each pizza name. The total is stored in the totalQuantity field returned by the aggregation pipeline.
Example output:
[
  { _id: 'Cheese', totalQuantity: 50 },
  { _id: 'Vegan', totalQuantity: 10 },
  { _id: 'Pepperoni', totalQuantity: 20 }
]

Calculate Total Order Value and Average Order Quantity
The following example calculates the total pizza order value and average order quantity between two dates:
db.orders.aggregate( [


  // Stage 1: Filter pizza order documents by date range
  {
     $match:
     {
        "date": { $gte: new ISODate( "2020-01-30" ), $lt: new ISODate( "2022-01-30" ) }
     }
  },


  // Stage 2: Group remaining documents by date and calculate results
  {
     $group:
     {
        _id: { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
        totalOrderValue: { $sum: { $multiply: [ "$price", "$quantity" ] } },
        averageOrderQuantity: { $avg: "$quantity" }
     }
  },


  // Stage 3: Sort documents by totalOrderValue in descending order
  {
     $sort: { totalOrderValue: -1 }
  }


] )

The $match stage:
Filters the pizza order documents to those in a date range specified using $gte and $lt.
Passes the remaining documents to the $group stage.
The $group stage:
Groups the documents by date using $dateToString.
For each group, calculates:
Total order value using $sum and $multiply.
Average order quantity using $avg.
Passes the grouped documents to the $sort stage.
The $sort stage:
Sorts the documents by the total order value for each group in descending order (-1).
Returns the sorted documents.
Example output:
[
  { _id: '2022-01-12', totalOrderValue: 790, averageOrderQuantity: 30 },
  { _id: '2021-03-13', totalOrderValue: 770, averageOrderQuantity: 15 },
  { _id: '2021-03-17', totalOrderValue: 630, averageOrderQuantity: 30 },
  { _id: '2021-01-13', totalOrderValue: 350, averageOrderQuantity: 10 }
]


